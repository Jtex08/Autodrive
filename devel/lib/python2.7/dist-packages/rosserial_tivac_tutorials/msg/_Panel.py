# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosserial_tivac_tutorials/Panel.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Panel(genpy.Message):
  _md5sum = "e0220b097b0a0dfac944b58072469424"
  _type = "rosserial_tivac_tutorials/Panel"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#Panel Identification
std_msgs/String panel_location

# Power supply status constants
uint8 PANEL_SUPPLY_STATUS_UNKNOWN = 0
uint8 PANEL_SUPPLY_STATUS_GOOD = 1
uint8 PANEL_SUPPLY_STATUS_OVERHEAT = 2
uint8 PANEL_SUPPLY_STATUS_OVERVOLTAGE = 3
uint8 PANEL_SUPPLY_STATUS_REVERSEVOLTAGE = 4

#Button Status
std_msgs/Bool btn1
std_msgs/Bool btn2
std_msgs/Bool btn3
std_msgs/Bool btn4


================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Bool
bool data"""
  # Pseudo-constants
  PANEL_SUPPLY_STATUS_UNKNOWN = 0
  PANEL_SUPPLY_STATUS_GOOD = 1
  PANEL_SUPPLY_STATUS_OVERHEAT = 2
  PANEL_SUPPLY_STATUS_OVERVOLTAGE = 3
  PANEL_SUPPLY_STATUS_REVERSEVOLTAGE = 4

  __slots__ = ['panel_location','btn1','btn2','btn3','btn4']
  _slot_types = ['std_msgs/String','std_msgs/Bool','std_msgs/Bool','std_msgs/Bool','std_msgs/Bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       panel_location,btn1,btn2,btn3,btn4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Panel, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.panel_location is None:
        self.panel_location = std_msgs.msg.String()
      if self.btn1 is None:
        self.btn1 = std_msgs.msg.Bool()
      if self.btn2 is None:
        self.btn2 = std_msgs.msg.Bool()
      if self.btn3 is None:
        self.btn3 = std_msgs.msg.Bool()
      if self.btn4 is None:
        self.btn4 = std_msgs.msg.Bool()
    else:
      self.panel_location = std_msgs.msg.String()
      self.btn1 = std_msgs.msg.Bool()
      self.btn2 = std_msgs.msg.Bool()
      self.btn3 = std_msgs.msg.Bool()
      self.btn4 = std_msgs.msg.Bool()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.panel_location.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4B().pack(_x.btn1.data, _x.btn2.data, _x.btn3.data, _x.btn4.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.panel_location is None:
        self.panel_location = std_msgs.msg.String()
      if self.btn1 is None:
        self.btn1 = std_msgs.msg.Bool()
      if self.btn2 is None:
        self.btn2 = std_msgs.msg.Bool()
      if self.btn3 is None:
        self.btn3 = std_msgs.msg.Bool()
      if self.btn4 is None:
        self.btn4 = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.panel_location.data = str[start:end].decode('utf-8')
      else:
        self.panel_location.data = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.btn1.data, _x.btn2.data, _x.btn3.data, _x.btn4.data,) = _get_struct_4B().unpack(str[start:end])
      self.btn1.data = bool(self.btn1.data)
      self.btn2.data = bool(self.btn2.data)
      self.btn3.data = bool(self.btn3.data)
      self.btn4.data = bool(self.btn4.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.panel_location.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4B().pack(_x.btn1.data, _x.btn2.data, _x.btn3.data, _x.btn4.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.panel_location is None:
        self.panel_location = std_msgs.msg.String()
      if self.btn1 is None:
        self.btn1 = std_msgs.msg.Bool()
      if self.btn2 is None:
        self.btn2 = std_msgs.msg.Bool()
      if self.btn3 is None:
        self.btn3 = std_msgs.msg.Bool()
      if self.btn4 is None:
        self.btn4 = std_msgs.msg.Bool()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.panel_location.data = str[start:end].decode('utf-8')
      else:
        self.panel_location.data = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.btn1.data, _x.btn2.data, _x.btn3.data, _x.btn4.data,) = _get_struct_4B().unpack(str[start:end])
      self.btn1.data = bool(self.btn1.data)
      self.btn2.data = bool(self.btn2.data)
      self.btn3.data = bool(self.btn3.data)
      self.btn4.data = bool(self.btn4.data)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
