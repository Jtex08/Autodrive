// Generated by gencpp from file rosserial_tivac_tutorials/Panel.msg
// DO NOT EDIT!


#ifndef ROSSERIAL_TIVAC_TUTORIALS_MESSAGE_PANEL_H
#define ROSSERIAL_TIVAC_TUTORIALS_MESSAGE_PANEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>

namespace rosserial_tivac_tutorials
{
template <class ContainerAllocator>
struct Panel_
{
  typedef Panel_<ContainerAllocator> Type;

  Panel_()
    : panel_location()
    , btn1()
    , btn2()
    , btn3()
    , btn4()  {
    }
  Panel_(const ContainerAllocator& _alloc)
    : panel_location(_alloc)
    , btn1(_alloc)
    , btn2(_alloc)
    , btn3(_alloc)
    , btn4(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _panel_location_type;
  _panel_location_type panel_location;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _btn1_type;
  _btn1_type btn1;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _btn2_type;
  _btn2_type btn2;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _btn3_type;
  _btn3_type btn3;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _btn4_type;
  _btn4_type btn4;



  enum {
    PANEL_SUPPLY_STATUS_UNKNOWN = 0u,
    PANEL_SUPPLY_STATUS_GOOD = 1u,
    PANEL_SUPPLY_STATUS_OVERHEAT = 2u,
    PANEL_SUPPLY_STATUS_OVERVOLTAGE = 3u,
    PANEL_SUPPLY_STATUS_REVERSEVOLTAGE = 4u,
  };


  typedef boost::shared_ptr< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> const> ConstPtr;

}; // struct Panel_

typedef ::rosserial_tivac_tutorials::Panel_<std::allocator<void> > Panel;

typedef boost::shared_ptr< ::rosserial_tivac_tutorials::Panel > PanelPtr;
typedef boost::shared_ptr< ::rosserial_tivac_tutorials::Panel const> PanelConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosserial_tivac_tutorials

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rosserial_tivac_tutorials': ['/home/ubuntu/catkin_bot/src/rosserial_tivac_tutorials/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0220b097b0a0dfac944b58072469424";
  }

  static const char* value(const ::rosserial_tivac_tutorials::Panel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0220b097b0a0dfaULL;
  static const uint64_t static_value2 = 0xc944b58072469424ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosserial_tivac_tutorials/Panel";
  }

  static const char* value(const ::rosserial_tivac_tutorials::Panel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Panel Identification\n\
std_msgs/String panel_location\n\
\n\
# Power supply status constants\n\
uint8 PANEL_SUPPLY_STATUS_UNKNOWN = 0\n\
uint8 PANEL_SUPPLY_STATUS_GOOD = 1\n\
uint8 PANEL_SUPPLY_STATUS_OVERHEAT = 2\n\
uint8 PANEL_SUPPLY_STATUS_OVERVOLTAGE = 3\n\
uint8 PANEL_SUPPLY_STATUS_REVERSEVOLTAGE = 4\n\
\n\
#Button Status\n\
std_msgs/Bool btn1\n\
std_msgs/Bool btn2\n\
std_msgs/Bool btn3\n\
std_msgs/Bool btn4\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: std_msgs/Bool\n\
bool data\n\
";
  }

  static const char* value(const ::rosserial_tivac_tutorials::Panel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.panel_location);
      stream.next(m.btn1);
      stream.next(m.btn2);
      stream.next(m.btn3);
      stream.next(m.btn4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Panel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosserial_tivac_tutorials::Panel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosserial_tivac_tutorials::Panel_<ContainerAllocator>& v)
  {
    s << indent << "panel_location: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.panel_location);
    s << indent << "btn1: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.btn1);
    s << indent << "btn2: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.btn2);
    s << indent << "btn3: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.btn3);
    s << indent << "btn4: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.btn4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSSERIAL_TIVAC_TUTORIALS_MESSAGE_PANEL_H
